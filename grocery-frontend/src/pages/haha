import React, { useState } from 'react';
import { 
  Upload, 
  FileText, 
  CheckCircle, 
  AlertCircle, 
  ArrowLeft,
  Camera,
  Building,
  CreditCard,
  Shield,
  MapPin,
  User
} from 'lucide-react';

const BusinessApplication = ({ token: propToken, onNavigate }) => {
  const token = propToken || localStorage.getItem('auth_token');
  
  const [currentStep, setCurrentStep] = useState(1);
  const [loading, setLoading] = useState(false);
  const [errors, setErrors] = useState({});
  
  const [formData, setFormData] = useState({
    // Basic business info
    name: '',
    email: '',
    phone: '',
    address: '',
    logo: null,
    
    // Required documents
    business_license: null,
    tax_certificate: null,
    owner_id_document: null,
    health_safety_cert: null,
    address_proof: null,
    storefront_photos: []
  });

  const [previewUrls, setPreviewUrls] = useState({});

  const documentRequirements = [
    {
      field: 'business_license',
      title: 'Business License / Registration Certificate',
      description: 'Proof that your business is legally registered',
      icon: <Building className="w-5 h-5" />,
      required: true
    },
    {
      field: 'tax_certificate',
      title: 'Tax ID Number (TIN) or VAT Certificate',
      description: 'For tax compliance and verification',
      icon: <CreditCard className="w-5 h-5" />,
      required: true
    },
    {
      field: 'owner_id_document',
      title: 'Business Owner\'s ID Document',
      description: 'National ID, driver\'s license, or passport',
      icon: <User className="w-5 h-5" />,
      required: true
    },
    {
      field: 'health_safety_cert',
      title: 'Health & Safety Certifications',
      description: 'Required for food/health-related businesses',
      icon: <Shield className="w-5 h-5" />,
      required: false
    },
    {
      field: 'address_proof',
      title: 'Address Verification',
      description: 'Utility bill or lease agreement',
      icon: <MapPin className="w-5 h-5" />,
      required: true
    }
  ];

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
    
    // Clear error when user starts typing
    if (errors[name]) {
      setErrors(prev => ({
        ...prev,
        [name]: null
      }));
    }
  };

  const handleFileChange = (field, file) => {
    if (!file) return;

    // Validate file size (5MB for documents, 3MB for images)
    const maxSize = field === 'logo' || field === 'storefront_photos' ? 3 * 1024 * 1024 : 5 * 1024 * 1024;
    
    if (file.size > maxSize) {
      setErrors(prev => ({
        ...prev,
        [field]: `File too large. Maximum size is ${maxSize / (1024 * 1024)}MB`
      }));
      return;
    }

    setFormData(prev => ({
      ...prev,
      [field]: file
    }));

    // Create preview for images
    if (file.type.startsWith('image/')) {
      const url = URL.createObjectURL(file);
      setPreviewUrls(prev => ({
        ...prev,
        [field]: url
      }));
    }

    // Clear error
    setErrors(prev => ({
      ...prev,
      [field]: null
    }));
  };

  const handleStorefrontPhotos = (files) => {
    const fileArray = Array.from(files);
    
    if (fileArray.length < 2) {
      setErrors(prev => ({
        ...prev,
        storefront_photos: 'Please upload at least 2 storefront photos'
      }));
      return;
    }

    if (fileArray.length > 5) {
      setErrors(prev => ({
        ...prev,
        storefront_photos: 'Maximum 5 photos allowed'
      }));
      return;
    }

    // Validate each file
    for (let file of fileArray) {
      if (file.size > 3 * 1024 * 1024) {
        setErrors(prev => ({
          ...prev,
          storefront_photos: 'Each photo must be less than 3MB'
        }));
        return;
      }
    }

    setFormData(prev => ({
      ...prev,
      storefront_photos: fileArray
    }));

    // Create previews
    const urls = fileArray.map(file => URL.createObjectURL(file));
    setPreviewUrls(prev => ({
      ...prev,
      storefront_photos: urls
    }));

    setErrors(prev => ({
      ...prev,
      storefront_photos: null
    }));
  };

  const validateStep = (step) => {
    const newErrors = {};

    if (step === 1) {
      if (!formData.name.trim()) newErrors.name = 'Business name is required';
      if (!formData.email.trim()) newErrors.email = 'Email is required';
      if (!formData.phone.trim()) newErrors.phone = 'Phone is required';
      if (!formData.address.trim()) newErrors.address = 'Address is required';
    }

    if (step === 2) {
      documentRequirements.forEach(doc => {
        if (doc.required && !formData[doc.field]) {
          newErrors[doc.field] = `${doc.title} is required`;
        }
      });
    }

    if (step === 3) {
      if (!formData.storefront_photos || formData.storefront_photos.length < 2) {
        newErrors.storefront_photos = 'At least 2 storefront photos are required';
      }
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const nextStep = () => {
    if (validateStep(currentStep)) {
      setCurrentStep(prev => Math.min(prev + 1, 4));
    }
  };

  const prevStep = () => {
    setCurrentStep(prev => Math.max(prev - 1, 1));
  };

  const submitApplication = async () => {
    if (!validateStep(3)) return;

    setLoading(true);
    
    const submitData = new FormData();
    
    // Add basic business info
    submitData.append('name', formData.name);
    submitData.append('email', formData.email);
    submitData.append('phone', formData.phone);
    submitData.append('address', formData.address);
    
    if (formData.logo) {
      submitData.append('logo', formData.logo);
    }

    // Add documents
    documentRequirements.forEach(doc => {
      if (formData[doc.field]) {
        submitData.append(doc.field, formData[doc.field]);
      }
    });

    // Add storefront photos
    if (formData.storefront_photos.length > 0) {
      formData.storefront_photos.forEach((photo, index) => {
        submitData.append(`storefront_photos[${index}]`, photo);
      });
    }

    try {
      const response = await fetch('/api/business-applications', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Accept': 'application/json',
        },
        body: submitData
      });

      const data = await response.json();

      if (response.ok) {
        setCurrentStep(4); // Success step
      } else {
        setErrors(data.errors || { submit: data.message || 'Submission failed' });
      }
    } catch (error) {
      setErrors({ submit: 'Network error. Please try again.' });
    } finally {
      setLoading(false);
    }
  };

  const renderStepIndicator = () => (
    <div className="flex items-center justify-center mb-8">
      {[1, 2, 3, 4].map((step) => (
        <React.Fragment key={step}>
          <div className={`flex items-center justify-center w-10 h-10 rounded-full border-2 
            ${currentStep >= step 
              ? 'bg-green-500 border-green-500 text-white' 
              : 'border-gray-300 text-gray-500'}`}>
            {currentStep > step ? <CheckCircle className="w-5 h-5" /> : step}
          </div>
          {step < 4 && (
            <div className={`w-16 h-1 mx-2 
              ${currentStep > step ? 'bg-green-500' : 'bg-gray-300'}`} />
          )}
        </React.Fragment>
      ))}
    </div>
  );

  const renderStep1 = () => (
    <div className="max-w-2xl mx-auto">
      <h2 className="text-2xl font-bold text-center mb-6">Business Information</h2>
      
      <div className="space-y-6">
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            Business Name *
          </label>
          <input
            type="text"
            name="name"
            value={formData.name}
            onChange={handleInputChange}
            className={`w-full px-4 py-3 border rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent ${
              errors.name ? 'border-red-500' : 'border-gray-300'
            }`}
            placeholder="Enter your business name"
          />
          {errors.name && <p className="text-red-500 text-sm mt-1">{errors.name}</p>}
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            Business Email *
          </label>
          <input
            type="email"
            name="email"
            value={formData.email}
            onChange={handleInputChange}
            className={`w-full px-4 py-3 border rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent ${
              errors.email ? 'border-red-500' : 'border-gray-300'
            }`}
            placeholder="business@example.com"
          />
          {errors.email && <p className="text-red-500 text-sm mt-1">{errors.email}</p>}
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            Phone Number *
          </label>
          <input
            type="tel"
            name="phone"
            value={formData.phone}
            onChange={handleInputChange}
            className={`w-full px-4 py-3 border rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent ${
              errors.phone ? 'border-red-500' : 'border-gray-300'
            }`}
            placeholder="+90 XXX XXX XX XX"
          />
          {errors.phone && <p className="text-red-500 text-sm mt-1">{errors.phone}</p>}
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            Business Address *
          </label>
          <textarea
            name="address"
            value={formData.address}
            onChange={handleInputChange}
            rows={3}
            className={`w-full px-4 py-3 border rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent ${
              errors.address ? 'border-red-500' : 'border-gray-300'
            }`}
            placeholder="Enter your complete business address"
          />
          {errors.address && <p className="text-red-500 text-sm mt-1">{errors.address}</p>}
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            Business Logo (Optional)
          </label>
          <div className="flex items-center space-x-4">
            <label className="flex flex-col items-center justify-center w-32 h-32 border-2 border-dashed border-gray-300 rounded-lg cursor-pointer hover:bg-gray-50">
              {previewUrls.logo ? (
                <img src={previewUrls.logo} alt="Logo preview" className="w-full h-full object-cover rounded-lg" />
              ) : (
                <>
                  <Upload className="w-8 h-8 text-gray-400" />
                  <span className="text-sm text-gray-500">Upload Logo</span>
                </>
              )}
              <input
                type="file"
                accept="image/*"
                onChange={(e) => handleFileChange('logo', e.target.files[0])}
                className="hidden"
              />
            </label>
          </div>
        </div>
      </div>
    </div>
  );

  const renderStep2 = () => (
    <div className="max-w-4xl mx-auto">
      <h2 className="text-2xl font-bold text-center mb-6">Required Documents</h2>
      <p className="text-gray-600 text-center mb-8">
        Please upload the following documents to verify your business. All documents should be clear and readable.
      </p>
      
      <div className="grid md:grid-cols-2 gap-6">
        {documentRequirements.map((doc) => (
          <div key={doc.field} className="border rounded-lg p-6">
            <div className="flex items-start space-x-3 mb-4">
              <div className="flex-shrink-0 p-2 bg-green-100 rounded-lg">
                {doc.icon}
              </div>
              <div className="flex-1">
                <h3 className="font-semibold text-gray-900">
                  {doc.title}
                  {doc.required && <span className="text-red-500 ml-1">*</span>}
                </h3>
                <p className="text-sm text-gray-600 mt-1">{doc.description}</p>
              </div>
            </div>
            
            <label className="block">
              <div className={`border-2 border-dashed rounded-lg p-4 text-center cursor-pointer hover:bg-gray-50 ${
                errors[doc.field] ? 'border-red-300 bg-red-50' : 'border-gray-300'
              }`}>
                {formData[doc.field] ? (
                  <div className="flex items-center justify-center space-x-2 text-green-600">
                    <CheckCircle className="w-5 h-5" />
                    <span className="text-sm font-medium">
                      {formData[doc.field].name}
                    </span>
                  </div>
                ) : (
                  <div className="flex flex-col items-center space-y-2">
                    <Upload className="w-8 h-8 text-gray-400" />
                    <span className="text-sm text-gray-600">
                      Click to upload or drag and drop
                    </span>
                    <span className="text-xs text-gray-500">
                      PDF, JPG, PNG (max 5MB)
                    </span>
                  </div>
                )}
              </div>
              <input
                type="file"
                accept=".pdf,.jpg,.jpeg,.png"
                onChange={(e) => handleFileChange(doc.field, e.target.files[0])}
                className="hidden"
              />
            </label>
            {errors[doc.field] && (
              <p className="text-red-500 text-sm mt-2">{errors[doc.field]}</p>
            )}
          </div>
        ))}
      </div>
    </div>
  );

  const renderStep3 = () => (
    <div className="max-w-3xl mx-auto">
      <h2 className="text-2xl font-bold text-center mb-6">Storefront Photos</h2>
      <p className="text-gray-600 text-center mb-8">
        Upload 2-5 clear photos of your business storefront and storage area to verify your physical location.
      </p>
      
      <div className="border-2 border-dashed border-gray-300 rounded-lg p-8">
        <div className="text-center">
          <Camera className="mx-auto h-12 w-12 text-gray-400 mb-4" />
          <label className="cursor-pointer">
            <span className="bg-green-500 text-white px-6 py-3 rounded-lg hover:bg-green-600 transition-colors">
              Select Photos (2-5 images)
            </span>
            <input
              type="file"
              accept="image/*"
              multiple
              onChange={(e) => handleStorefrontPhotos(e.target.files)}
              className="hidden"
            />
          </label>
          <p className="text-sm text-gray-500 mt-2">
            JPG, PNG (max 3MB each)
          </p>
        </div>
      </div>

      {previewUrls.storefront_photos && previewUrls.storefront_photos.length > 0 && (
        <div className="mt-6">
          <h3 className="font-semibold mb-4">Selected Photos ({previewUrls.storefront_photos.length})</h3>
          <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
            {previewUrls.storefront_photos.map((url, index) => (
              <div key={index} className="relative">
                <img
                  src={url}
                  alt={`Storefront ${index + 1}`}
                  className="w-full h-32 object-cover rounded-lg border"
                />
                <div className="absolute top-2 right-2 bg-green-500 text-white rounded-full w-6 h-6 flex items-center justify-center text-xs">
                  {index + 1}
                </div>
              </div>
            ))}
          </div>
        </div>
      )}

      {errors.storefront_photos && (
        <p className="text-red-500 text-center mt-4">{errors.storefront_photos}</p>
      )}
    </div>
  );

  const renderStep4 = () => (
    <div className="max-w-2xl mx-auto text-center">
      <div className="bg-green-100 rounded-full w-20 h-20 flex items-center justify-center mx-auto mb-6">
        <CheckCircle className="w-12 h-12 text-green-600" />
      </div>
      
      <h2 className="text-3xl font-bold text-gray-900 mb-4">Application Submitted!</h2>
      
      <p className="text-gray-600 mb-6">
        Thank you for submitting your business application. Our admin team will review your documents and get back to you within 2-3 business days.
      </p>
      
      <div className="bg-blue-50 border border-blue-200 rounded-lg p-4 mb-6">
        <h3 className="font-semibold text-blue-900 mb-2">What happens next?</h3>
        <ul className="text-left text-blue-800 text-sm space-y-1">
          <li>• Admin team reviews your documents</li>
          <li>• You'll receive an email notification about the status</li>
          <li>• If approved, you can start adding products</li>
          <li>• If more information is needed, we'll contact you</li>
        </ul>
      </div>
      
      <button
        onClick={() => onNavigate && onNavigate('/vendor-dashboard')}
        className="bg-green-500 text-white px-8 py-3 rounded-lg hover:bg-green-600 transition-colors"
      >
        Go to Dashboard
      </button>
    </div>
  );

  return (
    <div className="min-h-screen bg-gray-50 py-8">
      <div className="max-w-6xl mx-auto px-4">
        {/* Header */}
        <div className="flex items-center justify-between mb-8">
          <button
            onClick={() => onNavigate && onNavigate('/vendor-dashboard')}
            className="flex items-center text-gray-600 hover:text-gray-800"
          >
            <ArrowLeft className="w-5 h-5 mr-2" />
            Back to Dashboard
          </button>
          
          <h1 className="text-3xl font-bold text-gray-900">Business Application</h1>
          
          <div></div> {/* Spacer for flex layout */}
        </div>

        {/* Step Indicator */}
        {renderStepIndicator()}

        {/* Main Content */}
        <div className="bg-white rounded-lg shadow-lg p-8">
          {currentStep === 1 && renderStep1()}
          {currentStep === 2 && renderStep2()}
          {currentStep === 3 && renderStep3()}
          {currentStep === 4 && renderStep4()}
        </div>

        {/* Navigation Buttons */}
        {currentStep < 4 && (
          <div className="flex justify-between mt-8">
            <button
              onClick={prevStep}
              disabled={currentStep === 1}
              className={`px-6 py-3 rounded-lg ${
                currentStep === 1
                  ? 'bg-gray-200 text-gray-400 cursor-not-allowed'
                  : 'bg-gray-500 text-white hover:bg-gray-600'
              }`}
            >
              Previous
            </button>
            
            {currentStep === 3 ? (
              <button
                onClick={submitApplication}
                disabled={loading}
                className="bg-green-500 text-white px-8 py-3 rounded-lg hover:bg-green-600 disabled:opacity-50 flex items-center"
              >
                {loading ? (
                  <>
                    <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                    Submitting...
                  </>
                ) : (
                  'Submit Application'
                )}
              </button>
            ) : (
              <button
                onClick={nextStep}
                className="bg-green-500 text-white px-6 py-3 rounded-lg hover:bg-green-600"
              >
                Next
              </button>
            )}
          </div>
        )}

        {/* Global Error Display */}
        {errors.submit && (
          <div className="mt-4 p-4 bg-red-50 border border-red-200 rounded-lg">
            <div className="flex items-center">
              <AlertCircle className="w-5 h-5 text-red-500 mr-2" />
              <span className="text-red-700">{errors.submit}</span>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default BusinessApplication;